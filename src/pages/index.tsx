import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import {
  Auth0Client,
  PopupLoginOptions,
  User,
  createAuth0Client,
} from "@auth0/auth0-spa-js";
import { useEffect, useState } from "react";
import { createBrowserHistory } from "history";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [auth0InstanceForSPA, setAuth0InstanceForSPA] =
    useState<Auth0Client | null>(null);

  const [accessToken, setAccessToken] = useState<string | undefined>(undefined);
  const [user, setUser] = useState<User | undefined>(undefined);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  const onRedirectCallback = (appState: any) => {
    const history = createBrowserHistory();
    history.push(
      appState && appState.targetUrl
        ? appState.targetUrl
        : window.location.pathname
    );
  };

  useEffect(() => {
    const initAuth0 = async () => {
      const auth0ForSPA = await createAuth0Client({
        domain: "auth-dev.clientpoint.me",
        clientId: "auth0-client-id",
        authorizationParams: {
          audience: "api-audience",
        },
        useRefreshTokens: true,
        useRefreshTokensFallback: true,
        cacheLocation: "localstorage",
      });
      setAuth0InstanceForSPA(auth0ForSPA);

      if (window.location.search.includes("code=")) {
        const { appState } = await auth0ForSPA.handleRedirectCallback();
        onRedirectCallback(appState);
      }

      const isAuthenticated = await auth0ForSPA.isAuthenticated();

      setIsAuthenticated(isAuthenticated);

      if (isAuthenticated) {
        const user = await auth0ForSPA.getUser();
        setUser(user);
      }
    };
    initAuth0();
    // eslint-disable-next-line
  }, []);

  const loginWithPopup = async (options: PopupLoginOptions) => {
    // setPopupOpen(true);
    try {
      await auth0InstanceForSPA!.loginWithPopup(options);
    } catch (error) {
      console.error(error);
    }
    // finally {
    //   setPopupOpen(false);
    // }
    const user = await auth0InstanceForSPA!.getUser();
    setUser(user);
    setIsAuthenticated(true);
  };

  const logout = async (e: any) => {
    e.preventDefault();
    try {
      const cookies: string[] = document.cookie.split("; ");
      console.log(`Cookies: ${document.cookie}`);
      cookies.forEach((cookie: string) => {
        console.log(`Cookie: ${cookie}`);
        if (
          cookie.startsWith("auth0.ssodata") ||
          cookie.startsWith("com.auth0.auth")
        ) {
          console.log(`Handling cookie ${cookie}`);
          const d = window.location.hostname.split(".");
          while (d.length > 0) {
            const cookieBase =
              encodeURIComponent(cookie.split(";")[0].split("=")[0]) +
              "=; expires=Thu, 01-Jan-1970 00:00:01 GMT; domain=" +
              d.join(".") +
              " ;path=";
            const p = location.pathname.split("/");
            console.log(`Clearing potential cookie at ${cookieBase + "/"}`);
            document.cookie = cookieBase + "/";
            while (p.length > 0) {
              console.log(
                `Clearing potential cookie at ${cookieBase + p.join("/")}`
              );
              document.cookie = cookieBase + p.join("/");
              p.pop();
            }
            d.shift();
          }
        }
      });
      await auth0InstanceForSPA?.logout({});
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <>
      <Head>
        <title>Refresh Token</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <button
          onClickCapture={async () => {
            if (auth0InstanceForSPA) {
              await auth0InstanceForSPA
                .loginWithRedirect({
                  authorizationParams: {
                    audience: "api-audience",
                    redirect_uri: `${window.location.origin}/`,
                    scope:
                      "openid profile email offline_access YOUR-api-audience",
                  },
                })
                .then(() => {
                  console.log("success login");
                })
                .catch((err) => console.error(err));

              await auth0InstanceForSPA
                .handleRedirectCallback()
                .then((result) =>
                  console.log("Redirect Callback result: " + result)
                )
                .catch((err) => console.error(err));
            }
          }}
        >
          {" "}
          Login with Redirect
        </button>

        <a
          onClick={(e) => {
            e.preventDefault();
            loginWithPopup({});
          }}
        >
          Login with Popup
        </a>

        <button
          onClickCapture={async () => {
            const isAuthenticated =
              await auth0InstanceForSPA?.isAuthenticated();
            if (isAuthenticated) {
              const accessToken = await auth0InstanceForSPA?.getTokenSilently({
                authorizationParams: {
                  audience: "YOUR_API_AUDIENCE",
                  redirect_uri: "http://localhost:3000/",
                  scope:
                    "openid profile email offline_access YOUR_API_AUDINECE",
                },
              });

              // console.log(`Access Token: ${accessToken}`);
              setAccessToken(accessToken || undefined);

              auth0InstanceForSPA?.getUser().then((user) => {
                setUser(user);
              });
            } else {
              setAccessToken("Not found - (No user is authenticated.)");
            }
          }}
        >
          Get token silently
        </button>
        {accessToken && <div>Access Token :{accessToken}</div>}
        <br />
        <br />
        {user && isAuthenticated && (
          <div>
            User :{JSON.stringify(user)}
            <button onClick={(e) => logout(e)}>LOGOUT</button>
          </div>
        )}
      </main>
    </>
  );
}
